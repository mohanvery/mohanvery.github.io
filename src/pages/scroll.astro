---
import Layout from "../layouts/Layout.astro";
---

<Layout title="Welcome to Astro.">
    <main class="monu-lal">
        <div class="scroll-type" id="scrollType">Scroll type detection</div>
        <button id="tapper">Tapper</button>
        <button id="capper">Capper</button>
        <button id="fapper">Fapper</button>
    </main>
</Layout>

<style is:global>
    #tapper {
        position: absolute;
        bottom: -300px;
        right: 100px;
    }

    #capper {
        position: absolute;
        top: 100px;
        right: 100px;
    }

    #fapper {
        position: absolute;
        bottom: 100px;
        left: 100px;
    }

    .monu-lal {
        height: 200vh;
    }

    .scroll-type {
        position: fixed;
        top: 10px;
        left: 10px;
        border: 1px solid black;
        padding: 20px;
        font-size: 20px;
    }

    .trail {
        position: absolute;
        width: 10px;
        height: 10px;
        background: #000000;
        border-radius: 50%;
        pointer-events: none;
        opacity: 0.8;
        transition:
            transform 0.1s,
            opacity 1s;
    }
</style>

<script>
    // TypeScript code to detect scroll type
    const scrollTypeElement = document.getElementById(
        "scrollType"
    ) as HTMLDivElement;

    function detectScrollType(event: Event) {
        if (event.type === "wheel") {
            scrollTypeElement.textContent = "Scrolling with mouse";
        } else if (event.type === "keydown") {
            scrollTypeElement.textContent = "Scrolling with keyboard";
        } else if (event.type === "touchstart" || event.type === "touchmove") {
            scrollTypeElement.textContent = "Scrolling with touchscreen";
        } else if (event.type === "scroll") {
            // Check if the scroll event was triggered by scrollbar drag
            const isScrollbarDrag =
                event.target === document.documentElement &&
                document.documentElement.scrollTop > 0;
            if (isScrollbarDrag) {
                scrollTypeElement.textContent =
                    "Scrolling by dragging scrollbar";
            }
        }

        // @ts-ignore
        clearTimeout(detectScrollType.timeout);
        // @ts-ignore
        detectScrollType.timeout = setTimeout(() => {
            scrollTypeElement.textContent = "Scroll type detection";
        }, 2000);
    }

    // Event listeners for different scroll events
    window.addEventListener("wheel", detectScrollType);
    window.addEventListener("keydown", detectScrollType);
    window.addEventListener("touchstart", detectScrollType);
    window.addEventListener("touchmove", detectScrollType);
    window.addEventListener("scroll", detectScrollType);

    // Event listener to detect scrollbar drag
    window.addEventListener("mousedown", function (event) {
        // Check if the mousedown event happened on the scrollbar
        const isScrollbarClick =
            event.target === document.documentElement &&
            event.clientX >= window.innerWidth - 15;
        if (isScrollbarClick) {
            scrollTypeElement.textContent = "Scrolling by dragging scrollbar";
        }
    });

    const trailLength: number = 20;
    const trails: HTMLDivElement[] = [];

    // Create trail elements and add to the document
    for (let i = 0; i < trailLength; i++) {
        const trail = document.createElement("div");
        trail.className = "trail";
        trail.style.position = "absolute"; // Ensure the trails are positioned absolutely
        document.body.appendChild(trail);
        trails.push(trail);
    }

    let mouseX: number = 0;
    let mouseY: number = 0;

    // Capture mouse movement
    document.addEventListener("mousemove", (e: MouseEvent) => {
        mouseX = e.pageX;
        mouseY = e.pageY;
    });

    function updateTrails(): void {
        // Update positions of trails
        for (let i = trails.length - 1; i > 0; i--) {
            trails[i].style.left = trails[i - 1].style.left;
            trails[i].style.top = trails[i - 1].style.top;
        }
        trails[0].style.left = `${mouseX}px`;
        trails[0].style.top = `${mouseY}px`;
    }

    function fadeTrails(): void {
        // Adjust opacity of trails
        for (let i = 0; i < trails.length; i++) {
            trails[i].style.opacity = `${1 - i / trails.length}`;
        }
    }

    function animate(): void {
        // Animate trails
        updateTrails();
        fadeTrails();
        requestAnimationFrame(animate);
    }

    // Start the animation
    animate();
</script>
